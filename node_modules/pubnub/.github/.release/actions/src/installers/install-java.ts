/** Installed Java check result representation. */
export type JavaCheckResult = {
  /** Whether required major Java version available or not. */
  available: boolean

  /** For case when Java doesn't match expectations, will contain reason. */
  errorMessage?: string

  /** Potential issue fix suggestion. */
  errorSuggestion?: string
}

/**
 * Actual Java installation should be done using `actions/setup-java@v2` which takes
 * care of architecture, OS type.
 * This function verify that minimum required version installed.
 *
 * @param {number} major Major version which should be installed on container.
 *
 * @return {JavaCheckResult} Asynchronous Java check results.
 */
export const checkJavaVersion = (major: number): JavaCheckResult => {
  let errorMessage: string | undefined

  if ([8, 11, 12].indexOf(major) === -1)
    errorMessage = `Unsupported major Java version specified: ${major}`

  if (!javaHome(major))
    errorMessage = `JAVA_HOME_${major}_X64 not found in system environments.`

  return {
    available: !errorMessage,
    errorMessage,
    errorSuggestion: errorMessage ? `Use 'actions/setup-java@v2' to install Java '${major}'.` : undefined
  }
}

/**
 * Get `JAVA_HOME` for specified Java version.
 *
 * @param {number} major Major version for which path should be retrieved.
 *
 * @return {string|undefined} `JAVA_HOME` environment variable value if available.
 */
export const javaHome = (major: number): string | undefined => process.env[`JAVA_HOME_${major}_X64`]
