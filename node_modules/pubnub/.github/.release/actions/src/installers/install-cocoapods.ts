import {gte} from 'semver'
import {cliCheck, cliVersion, cliExec} from '../helpers/cli'

/** Installed CocoaPods check result representation. */
export type CocoaPodsCheckResult = {
  /** Whether CocoaPods installed on runner or not. */
  installed: boolean

  /** Whether installed CocoaPods match version expectations or not. */
  match: boolean

  /** Detected CocoaPods version. */
  version?: string

  /** For case when CocoaPods doesn't match expectations, will contain reason. */
  errorMessage?: string

  /** Potential issue fix suggestion. */
  errorSuggestion?: string
}

/** CocoaPods installation results representation. */
export type CocoaPodsInstallResult = {
  /** Whether required CocoaPods version installed successfully or not. */
  successful: boolean

  /** For case when CocoaPods doesn't match expectations, will contain reason. */
  errorMessage?: string

  /** Potential issue fix suggestion. */
  errorSuggestion?: string
}

/**
 * Verify that minimum required version installed.
 *
 * @param {number} major Minimum major version which should be installed on container.
 * @param {number?} minor Minimum minor version which should be installed on container.
 * @param {number?} patch Minimum patch version which should be installed on container.
 *
 * @return {Promise<CocoaPodsCheckResult>} Asynchronous CocoaPods check results.
 */
export const checkCocoaPodsVersion = async (major: number, minor?: number, patch?: number): Promise<CocoaPodsCheckResult> => {
  const expectedVersion = `${major}.${minor ?? 0}.${patch ?? 0}`
  let errorMessage: string | undefined
  let version: string | undefined
  let installed = false

  const checkResult = await cliCheck({cli: 'pod', commandOrFlags: ['--version']})

  // Extract CocoaPods version from `pod --version` output.
  if (checkResult.available) version = cliVersion(checkResult.output)

  if (version && !gte(version, expectedVersion)) {
    errorMessage = `Outdated CocoaPods ${version} installed.`
    version = expectedVersion
    installed = true
  } else if (!version) {
    version = `${major}.${minor ?? 'x'}${patch ? `.${patch}` : ''}`
    errorMessage = 'CocoaPods not installed.'
  }

  return {installed, match: !errorMessage, version, errorMessage}
}

/**
 * Install specified version of CocoaPods.
 *
 * @param {string} version Target version which should be installed.
 * @param {boolean} installed Whether CocoaPods already installed.
 *
 * @return {Promise<CocoaPodsInstallResult>} Asynchronous results of CocoaPods installation.
 */
export const installCocoaPods = async (version: string, installed: boolean): Promise<CocoaPodsInstallResult> => {
  let errorMessage, errorSuggestion: string | undefined

  if (installed) {
    const execResult = await cliExec({cli: 'gem', commandOrFlags: ['uninstall', 'cocoapods', '--all', '--executables']})

    if (execResult.code !== 0) {
      errorMessage = `CocoaPods can't be removed: ${execResult.stderr || execResult.stdout}`
      errorSuggestion = 'Not enough permissions or CocoaPods not installed.'
    }
  }

  if (!errorMessage) {
    const installResult = await cliExec({
      cli: 'gem',
      commandOrFlags: ['install', 'cocoapods', '-v', version, '--no-document']
    })

    if (installResult.code !== 0) {
      errorMessage = `Unable to install CocoaPods: ${installResult.stderr || installResult.stdout}`
      errorSuggestion = `Ensure that specified version (${version}) of CocoaPods has been release.`
    }
  }

  return {successful: !errorMessage, errorMessage, errorSuggestion}
}
