import {gte} from 'semver'
import {cliCheck, cliVersion} from '../helpers/cli'

/** Installed Python check result representation. */
export type PythonCheckResult = {
  /** Whether Python installed and match version expectations or not. */
  match: boolean

  /** Detected Python version. */
  version?: string

  /** For case when Python doesn't match expectations, will contain reason. */
  errorMessage?: string

  /** Potential issue fix suggestion. */
  errorSuggestion?: string
}

/**
 * Actual Python installation should be done using `actions/setup-python@v2` which takes
 * care of architecture, OS type.
 * This function verify that minimum required version installed.
 *
 * @param {number} major Minimum major version which should be installed on container.
 * @param {number?} minor Minimum minor version which should be installed on container.
 * @param {number?} patch Minimum patch version which should be installed on container.
 *
 * @return {Promise<PythonCheckResult>} Asynchronous Python check results.
 */
export const checkPythonVersion = async (major: number, minor?: number, patch?: number): Promise<PythonCheckResult> => {
  const expectedVersion = `${major}.${minor ?? 0}.${patch ?? 0}`
  let errorMessage: string | undefined
  let version: string | undefined

  const checkResult = await cliCheck({cli: 'python', commandOrFlags: ['--version']})

  // Extract Python version from `python --version` output.
  if (checkResult.available) version = cliVersion(checkResult.output)

  if (version && !gte(version, expectedVersion)) {
    errorMessage = `Outdated Python ${version} installed.`
    version = expectedVersion
  } else if (!version) {
    version = `${major}.${minor ?? 'x'}${patch ? `.${patch}` : ''}`
    errorMessage = 'Python not installed.'
  }

  return {
    match: !errorMessage,
    version,
    errorMessage,
    errorSuggestion: errorMessage ? `Use 'actions/setup-python@v2' to install Python '${version}'.` : undefined
  }
}
