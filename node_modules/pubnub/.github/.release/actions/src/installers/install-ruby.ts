import {gte} from 'semver'
import {cliCheck, cliVersion} from '../helpers/cli'

/** Installed Ruby check result representation. */
export type RubyCheckResult = {
  /** Whether Ruby installed and match version expectations or not. */
  match: boolean

  /** Detected Ruby version. */
  version?: string

  /** For case when Ruby doesn't match expectations, will contain reason. */
  errorMessage?: string

  /** Potential issue fix suggestion. */
  errorSuggestion?: string
}

/**
 * Actual Ruby installation should be done using `actions/setup-ruby@v1` which takes
 * care of architecture, OS type.
 * This function verify that minimum required version installed.
 *
 * @param {number} major Minimum major version which should be installed on container.
 * @param {number?} minor Minimum minor version which should be installed on container.
 * @param {number?} patch Minimum patch version which should be installed on container.
 *
 * @return {Promise<RubyCheckResult>} Asynchronous Ruby check results.
 */
export const checkRubyVersion = async (major: number, minor?: number, patch?: number): Promise<RubyCheckResult> => {
  const expectedVersion = `${major}.${minor ?? 0}.${patch ?? 0}`
  let errorMessage: string | undefined
  let version: string | undefined

  const checkResult = await cliCheck({cli: 'ruby', commandOrFlags: ['--version']})

  // Extract Ruby version from `ruby --version` output.
  if (checkResult.available) version = cliVersion(checkResult.output)

  if (version && !gte(version, expectedVersion)) {
    errorMessage = `Outdated Ruby ${version} installed.`
    version = expectedVersion
  } else if (!version) {
    version = `${major}.${minor ?? 'x'}${patch ? `.${patch}` : ''}`
    errorMessage = 'Ruby not installed.'
  }

  return {
    match: !errorMessage,
    version,
    errorMessage,
    errorSuggestion: errorMessage ? `Use 'actions/setup-ruby@v1' to install Ruby '${version}'.` : undefined
  }
}
