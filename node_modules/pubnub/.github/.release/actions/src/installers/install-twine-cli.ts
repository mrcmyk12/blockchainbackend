import * as core from '@actions/core'
import {cliCheck, cliExec, cliVersion} from '../helpers/cli'
import * as python from './install-python-module'

/** Installed Twine check result representation. */
export type TwineCheckResult = {
  /** Whether Twine installed or not. */
  installed: boolean

  /** Detected Twine version. */
  version?: string

  /** Any issues discovered during Twine installation check. */
  errorMessage?: string

  /** Potential issue fix suggestion. */
  errorSuggestion?: string
}

export type TwineInstallResult = TwineCheckResult

/**
 * Retrieve Twine CLI version if possible.
 *
 * @return {Promise<string|undefined>} Asynchronous Twine version number.
 */
const twineCLIVersion = async (): Promise<string | undefined> => {
  let version: string | undefined

  const checkResult = await cliCheck({cli: 'twine', commandOrFlags: ['--version']})
  if (checkResult.available) version = cliVersion(checkResult.output, /twine version ([0-9.]*)/m)

  return version
}

/**
 * Check whether Twine CLI installed on system or not.
 *
 * @return {Promise<TwineCheckResult>} Asynchronous Twine CLI check results.
 */
export const checkTwineInstalled = async (): Promise<TwineCheckResult> => {
  let errorMessage: string | undefined

  // Ensure PATH is set properly.
  const pathResult = await cliExec({cli: 'python', commandOrFlags: ['-m', 'site', '--user-base']})

  if (pathResult.code === 0) core.addPath(`${pathResult.stdout.trim()}/bin`)
  else errorMessage = 'Unable to get Python path for user modules.'

  const version = await twineCLIVersion()
  if (!version) errorMessage = 'Twine CLI not installed.'

  return {installed: !errorMessage, version, errorMessage}
}

/**
 * Install Twine CLI if possible.
 *
 * @return {Promise<TwineInstallResult>} Asynchronous Twine install result.
 */
export const installTwineCli = async (): Promise<TwineInstallResult> => {
  let errorMessage: string | undefined
  let version: string | undefined
  let currentModule = 'pip'

  // Try install / update PIP module if required.
  let execResult = await python.installPIP(true)
  if (execResult.code !== 0) await python.installPIP(false)

  if (execResult.code === 0) {
    currentModule = 'twine'

    // Try install / update Twine CLI module if required.
    execResult = await python.installModule('twine', true)
    if (execResult.code !== 0) await python.installModule('twine', false)
  }

  if (execResult.code !== 0)
    errorMessage = `Python '${currentModule}' install / update did fail: ${execResult.stderr || execResult.stdout}`
  else {
    version = await twineCLIVersion()

    if (!version) errorMessage = 'Twine CLI not available.'
  }

  return {installed: !errorMessage, version, errorMessage}
}
