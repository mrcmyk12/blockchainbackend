import * as core from '@actions/core'
import * as python from '../installers/install-python-module'
import {cliCheck, cliExec, cliVersion} from '../helpers/cli'

/** Installed AWS CLI check result representation. */
export type AWSCLICheckResult = {
  /** Whether AWS CLI installed or not. */
  installed: boolean

  /** Detected AWS CLI version. */
  version?: string

  /** For case when AWS CLI check fails. */
  errorMessage?: string

  /** Potential issue fix suggestion. */
  errorSuggestion?: string
}

/** AWS CLI installation results representation. */
export type AWSCLIInstallResult = {
  /** Whether required AWS CLI version installed successfully or not. */
  successful: boolean

  /** For case when AWS installation fails, will contain reason. */
  errorMessage?: string

  /** Potential issue fix suggestion. */
  errorSuggestion?: string
}

/**
 * Retrieve AWS CLI version if possible.
 *
 * @return {Promise<string|undefined>} Asynchronous AWS CLI version number.
 */
const awsCLIVersion = async (): Promise<string | undefined> => {
  let version: string | undefined
  const checkResult = await cliCheck({cli: 'aws', commandOrFlags: ['--version']})

  if (checkResult.available)
    version = cliVersion(checkResult.output, /aws-cli\/([0-9.]*)/m)

  return version
}

/**
 * Check whether AWS CLI installed on system or not.
 *
 * @return {Promise<AWSCLICheckResult>} Asynchronously whether AWS CLI installed or not.
 */
export const checkAWSCLIInstalled = async (): Promise<AWSCLICheckResult> => {
  let errorMessage, errorSuggestion: string | undefined
  let version: string | undefined

  // Ensure PATH is set properly.
  const pathResult = await cliExec({cli: 'python', commandOrFlags: ['-m', 'site', '--user-base']})

  if (pathResult.code === 0) core.addPath(`${pathResult.stdout.trim()}/bin`)
  else {
    errorMessage = 'Unable to get Python path for user modules.'
    errorSuggestion = 'Reinstall Python with it\'s dependencies. Check current user permissions.'
  }

  if (!errorMessage) version = await awsCLIVersion()

  return {installed: version !== undefined, errorMessage, errorSuggestion}
}

/**
 * Install AWS CLI if possible.
 *
 * @return {Promise<AWSCLIInstallResult>} Asynchronously whether AWS CLI installed or not.
 */
export const installAWSCLI = async (): Promise<AWSCLIInstallResult> => {
  let errorMessage, errorSuggestion: string | undefined
  let currentModule = 'pip'

  // Try install / update PIP module if required.
  let execResult = await python.installPIP(true)
  if (execResult.code !== 0) await python.installPIP(false)

  if (execResult.code === 0) {
    currentModule = 'awscli'

    // Try install / update AWS CLI module if required.
    execResult = await python.installModule('awscli', true)
    if (execResult.code !== 0) await python.installModule('awscli', false)
  }

  if (execResult.code !== 0) {
    errorMessage = `Python '${currentModule}' install / update did fail: ${execResult.stderr || execResult.stdout}`
    errorSuggestion = 'Check names of installed modules and current user permissions.'
  } else {
    const version = await awsCLIVersion()

    if (!version) {
      errorMessage = 'AWS CLI not available'
      errorSuggestion = 'AWS CLI not available on $PATH'
    }
  }

  return {successful: !errorMessage, errorMessage, errorSuggestion}
}
