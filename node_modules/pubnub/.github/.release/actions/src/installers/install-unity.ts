import * as tc from '@actions/tool-cache'
import * as cache from '@actions/cache'
import * as core from '@actions/core'
import styles from 'ansi-styles'
import path from 'path'
import fs from 'fs'
import {action, getActionInput} from '../helpers/actions'
import {ACTION_WORKING_DIR_PATH, GITHUB_ACTIONS_PATH} from '../constants'
import {OperationOutcome} from '../helpers/types'
import {cliExec} from '../helpers/cli'
import * as log from '../helpers/log'


/** Map of Unity versions to their hashes, which can be used for download. */
const unityVersionMap: Record<string, string> = {
  '5.0.0f4': '5b98b70ebeb9', '5.0.1f1': '5a2e8fe35a68', '5.0.2f1': '0b02744d4013', '5.0.3f2': 'c28c7860811c',
  '5.0.4f1': '1d75c08f1c9c', '5.1.0f3': 'ec70b008569d', '5.1.1f1': '2046fc06d4d8', '5.1.2f1': 'afd2369b692a',
  '5.1.3f1': 'b0a23b31c3d8', '5.1.4f1': '36d0f3617432', '5.1.5f1': '9de525f1a6a8', '5.2.0f3': 'e7947df39b5c',
  '5.2.1f1': '44735ea161b3', '5.2.2f1': '3757309da7e7', '5.2.3f1': 'f3d16a1fa2dd', '5.2.4f1': '98095704e6fe',
  '5.2.5f1': 'ad2d0368e248', '5.3.0f4': '2524e04062b4', '5.3.1f1': 'cc9cbbcc37b4', '5.3.2f1': 'e87ab445ead0',
  '5.3.3f1': '910d71450a97', '5.3.4f1': 'fdbb5133b820', '5.3.5f1': '960ebf59018a', '5.3.6f1': '29055738eb78',
  '5.3.7f1': 'c347874230fb', '5.3.8f2': '0c7e33ff9c0e', '5.4.0f3': 'a6d8d714de6f', '5.4.1f1': '649f48bbbf0f',
  '5.4.2f2': 'b7e030c65c9b', '5.4.3f1': '01f4c123905a', '5.4.4f1': '5a3967d8c55d', '5.4.5f1': '68943b6c8c42',
  '5.4.6f3': '7c5210d1343f', '5.5.0f3': '38b4efef76f0', '5.5.1f1': '88d00a7498cd', '5.5.2f1': '3829d7f588f3',
  '5.5.3f1': '4d2f809fd6f3', '5.5.4f1': '8ffd0efd98b1', '5.5.5f1': 'd875e6967482', '5.5.6f1': '3fb31a95adee',
  '5.6.0f3': '497a0f351392', '5.6.1f1': '2860b30f0b54', '5.6.2f1': 'a2913c821e27', '5.6.3f1': 'd3101c3b8468',
  '5.6.4f1': 'ac7086b8d112', '5.6.5f1': '2cac56bf7bb6', '5.6.6f2': '6bac21139588', '5.6.7f1': 'e80cc3114ac1',
  '2017.1.0f3': '472613c02cf7', '2017.1.1f1': '5d30cf096e79', '2017.1.2f1': 'cc85bf6a8a04', '2017.1.3f1': '574eeb502d14',
  '2017.1.4f1': '9fd71167a288', '2017.1.5f1': '9758a36cfaa6', '2017.2.0f3': '46dda1414e51', '2017.2.1f1': '94bf3f9e6b5e',
  '2017.2.2f1': '1f4e0f9b6a50', '2017.2.3f1': '372229934efd', '2017.2.4f1': 'f1557d1f61fd', '2017.2.5f1': '588dc79c95ed',
  '2017.3.0f3': 'a9f86dcd79df', '2017.3.1f1': 'fc1d3344e6ea', '2017.4.0f1': 'b5bd171ee9ba', '2017.4.1f1': '9231f953d9d3',
  '2017.4.2f2': '52d9cb89b362', '2017.4.3f1': '21ae32b5a9cb', '2017.4.4f1': '645c9050ba4d', '2017.4.5f1': '89d1db9cb682',
  '2017.4.6f1': 'c24f30193bac', '2017.4.7f1': 'de9eb5ca33c5', '2017.4.8f1': '5ab7f4878ef1', '2017.4.9f1': '6d84dfc57ccf',
  '2017.4.10f1': 'f2cce2a5991f', '2017.4.11f1': '8c6b8ef6d111', '2017.4.12f1': 'b582b87345b1', '2017.4.13f1': '6902ad48015d',
  '2017.4.14f1': 'b28150134d55', '2017.4.15f1': '5d485b4897a7', '2017.4.16f1': '7f7bdd1ef02b', '2017.4.17f1': '05307cddbb71',
  '2017.4.18f1': 'a9236f402e28', '2017.4.19f1': '47cd37c28be8', '2017.4.20f2': '413dbd19b6dc', '2017.4.21f1': 'de35fe252486',
  '2017.4.22f1': 'eb4bc6fa7f1d', '2017.4.23f1': 'f80c8a98b1b5', '2017.4.24f1': '786769fc3439', '2017.4.25f1': '9cba1c3a94f1',
  '2017.4.26f1': '3b349d10f010', '2017.4.27f1': '0c4b856e4c6e', '2017.4.28f1': 'e3a0f7dd2097', '2017.4.29f1': '06508aa14ca1',
  '2017.4.30f1': 'c6fa43736cae', '2017.4.31f1': '9c8dbc3421cb', '2017.4.32f1': '4da3ed968770', '2017.4.33f1': 'a8557a619e24',
  '2017.4.34f1': '121f18246307', '2017.4.35f1': 'e57a7bcbbf0b', '2017.4.36f1': 'c663def8414c', '2017.4.37f1': '78b69503ebc4',
  '2017.4.38f1': '82ac2fb100ce', '2017.4.39f1': '947131c5be7e', '2017.4.40f1': '6e14067f8a9a', '2018.1.0f2': 'd4d99f31acba',
  '2018.1.1f1': 'b8cbb5de9840', '2018.1.2f1': 'a46d718d282d', '2018.1.3f1': 'a53ad04f7c7f', '2018.1.4f1': '1a308f4ebef1',
  '2018.1.5f1': '732dbf75922d', '2018.1.6f1': '57cc34175ccf', '2018.1.7f1': '4cb482063d12', '2018.1.8f1': '26051d4de9e9',
  '2018.1.9f2': 'a6cc294b73ee', '2018.2.0f2': '787658998520', '2018.2.1f1': '1a9968d9f99c', '2018.2.2f1': 'c18cef34cbcd',
  '2018.2.3f1': '1431a7d2ced7', '2018.2.4f1': 'cb262d9ddeaf', '2018.2.5f1': '3071d1717b71', '2018.2.6f1': 'c591d9a97a0b',
  '2018.2.7f1': '4ebd28dd9664', '2018.2.8f1': 'ae1180820377', '2018.2.9f1': '2207421190e9', '2018.2.10f1': '674aa5a67ed5',
  '2018.2.11f1': '38bd7dec5000', '2018.2.12f1': '0a46ddfcfad4', '2018.2.13f1': '83fbdcd35118', '2018.2.14f1': '3262fb3b0716',
  '2018.2.15f1': '65e0713a5949', '2018.2.16f1': '39a4ac3d51f6', '2018.2.17f1': '88933597c842', '2018.2.18f1': '4550892b6062',
  '2018.2.19f1': '06990f28ba00', '2018.2.20f1': 'cef3e6c0c622', '2018.2.21f1': 'a122f5dc316d', '2018.3.0f2': '6e9a27477296',
  '2018.3.1f1': 'bb579dc42f1d', '2018.3.2f1': 'b3c100a4b73a', '2018.3.3f1': '393bae82dbb8', '2018.3.4f1': '1d952368ca3a',
  '2018.3.5f1': '76b3e37670a4', '2018.3.6f1': 'a220877bc173', '2018.3.7f1': '9e14d22a41bb', '2018.3.8f1': 'fc0fe30d6d91',
  '2018.3.9f1': '947e1ea5aa8d', '2018.3.10f1': 'f88de2c96e63', '2018.3.11f1': '5063218e4ab8', '2018.3.12f1': '8afd630d1f5b',
  '2018.3.13f1': '06548a9e9582', '2018.3.14f1': 'd0e9f15437b1', '2018.4.0f1': 'b6ffa8986c8d', '2018.4.1f1': 'b7c424a951c0',
  '2018.4.2f1': 'd6fb3630ea75', '2018.4.3f1': '8a9509a5aff9', '2018.4.4f1': '5440768ff61c', '2018.4.5f1': '7b38f8ac282e',
  '2018.4.6f1': 'cde1bbcc9f0d', '2018.4.7f1': 'b9a993fd1334', '2018.4.8f1': '9bc9d983d803', '2018.4.9f1': 'ca372476eaba',
  '2018.4.10f1': 'a0470569e97b', '2018.4.11f1': '7098af2f11ea', '2018.4.12f1': '59ddc4c59b4f', '2018.4.13f1': '497f083a43af',
  '2018.4.14f1': '05119b33d0b7', '2018.4.15f1': '13f5a1bf9ca1', '2018.4.16f1': 'e6e9ca02b32a', '2018.4.17f1': 'b830f56f42f0',
  '2018.4.18f1': '61fce66342ad', '2018.4.19f1': '459f70f82ea4', '2018.4.20f1': '008688490035', '2018.4.21f1': 'fd3915227633',
  '2018.4.22f1': '3362ffbb7aa1', '2018.4.23f1': 'c9cf1a90e812', '2018.4.24f1': '3071911a89e9', '2018.4.25f1': 'b07bfa0a8827',
  '2018.4.26f1': 'a7ac1c6396db', '2018.4.27f1': '4e283b7d3f88', '2018.4.28f1': 'a2d4f71491a4', '2018.4.29f1': '50cce2edf27f',
  '2018.4.30f1': 'c698a062d8e6', '2018.4.31f1': '212ea663d844', '2018.4.32f1': 'fba45da84107', '2018.4.33f1': 'd75f7e9df24c',
  '2018.4.34f1': 'ae2afac172fb', '2018.4.35f1': 'dbb5675dce2d', '2018.4.36f1': '6cd387d23174', '2019.1.0f2': '292b93d75a2c',
  '2019.1.1f1': 'fef62e97e63b', '2019.1.2f1': '3e18427e571f', '2019.1.3f1': 'dc414eb9ed43', '2019.1.4f1': 'ffa3a7a2dd7d',
  '2019.1.5f1': '0ca0f5646614', '2019.1.6f1': 'f2970305fe1c', '2019.1.7f1': 'f3c4928e5742', '2019.1.8f1': '7938dd008a75',
  '2019.1.9f1': 'd5f1b37da199', '2019.1.10f1': 'f007ed779b7a', '2019.1.11f1': '9b001d489a54', '2019.1.12f1': 'f04f5427219e',
  '2019.1.13f1': 'b5956c0a61e7', '2019.1.14f1': '148b5891095a', '2019.2.0f1': '20c1667945cf', '2019.2.1f1': 'ca4d5af0be6f',
  '2019.2.2f1': 'ab112815d860', '2019.2.3f1': '8e55c27a4621', '2019.2.4f1': 'c63b2af89a85', '2019.2.5f1': '9dace1eed4cc',
  '2019.2.6f1': 'fe82a0e88406', '2019.2.7f2': 'c96f78eb5904', '2019.2.8f1': 'ff5b465c8d13', '2019.2.9f1': 'ebce4d76e6e8',
  '2019.2.10f1': '923acd2d43aa', '2019.2.11f1': '5f859a4cfee5', '2019.2.12f1': 'b1a7e1fb4fa5', '2019.2.13f1': 'e20f6c7e5017',
  '2019.2.14f1': '49dd4e9fa428', '2019.2.15f1': 'dcb72c2e9334', '2019.2.16f1': 'b9898e2d04a4', '2019.2.17f1': '8e603399ca02',
  '2019.2.18f1': 'bbf64de26e34', '2019.2.19f1': '929ab4d01772', '2019.2.20f1': 'c67d00285037', '2019.2.21f1': '9d528d026557',
  '2019.3.0f6': '27ab2135bccf', '2019.3.1f1': '89d6087839c2', '2019.3.2f1': 'c46a3a38511e', '2019.3.3f1': '7ceaae5f7503',
  '2019.3.4f1': '4f139db2fdbd', '2019.3.5f1': 'd691e07d38ef', '2019.3.6f1': '5c3fb0a11183', '2019.3.7f1': '6437fd74d35d',
  '2019.3.8f1': '4ba98e9386ed', '2019.3.9f1': 'e6e740a1c473', '2019.3.10f1': '5968d7f82152', '2019.3.11f1': 'ceef2d848e70',
  '2019.3.12f1': '84b23722532d', '2019.3.13f1': 'd4ddf0d95db9', '2019.3.14f1': '2b330bf6d2d8', '2019.3.15f1': '59ff3e03856d',
  '2019.4.0f1': '0af376155913', '2019.4.1f1': 'e6c045e14e4e', '2019.4.2f1': '20b4642a3455', '2019.4.3f1': 'f880dceab6fe',
  '2019.4.4f1': '1f1dac67805b', '2019.4.5f1': '81610f64359c', '2019.4.6f1': 'a7aea80e3716', '2019.4.7f1': 'e992b1a16e65',
  '2019.4.8f1': '60781d942082', '2019.4.9f1': '50fe8a171dd9', '2019.4.10f1': '5311b3af6f69', '2019.4.11f1': '2d9804dddde7',
  '2019.4.12f1': '225e826a680e', '2019.4.13f1': '518737b1de84', '2019.4.14f1': '4037e52648cd', '2019.4.15f1': 'fbf367ac14e9',
  '2019.4.16f1': 'e05b6e02d63e', '2019.4.17f1': '667c8606c536', '2019.4.18f1': '3310a4d4f880', '2019.4.19f1': 'ca5b14067cec',
  '2019.4.20f1': '6dd1c08eedfa', '2019.4.21f1': 'b76dac84db26', '2019.4.22f1': '9fdda2fe27ad', '2019.4.23f1': '3f4e01f1a5ec',
  '2019.4.24f1': '5da6f0345e82', '2019.4.25f1': '01a0494af254', '2019.4.26f1': 'e0392c6b2363', '2019.4.27f1': '23dc10685eb4',
  '2019.4.28f1': '1381962e9d08', '2019.4.29f1': '0eeae20b1d82', '2019.4.30f1': 'e8c891080a1f', '2019.4.31f1': 'bd5abf232a62',
  '2019.4.32f1': 'f88bf0bee961', '2020.1.0f1': '2ab9c4179772', '2020.1.1f1': '2285c3239188', '2020.1.2f1': '7b32bc54ba47',
  '2020.1.3f1': 'cf5c4788e1d8', '2020.1.4f1': 'fa717bb873ec', '2020.1.5f1': 'e025938fdedc', '2020.1.6f1': 'fc477ca6df10',
  '2020.1.7f1': '064ffcdb64ad', '2020.1.8f1': '22e8c0b0c3ec', '2020.1.9f1': '145f5172610f', '2020.1.10f1': '974a9d56f159',
  '2020.1.11f1': '698c1113cef0', '2020.1.12f1': '55b56f0a86e3', '2020.1.13f1': '5e24f28bfbc0', '2020.1.14f1': 'd81f64f5201d',
  '2020.1.15f1': '97d0ae02d19d', '2020.1.16f1': 'f483ad6465d6', '2020.1.17f1': '9957aee8edc2', '2020.2.0f1': '3721df5a8b28',
  '2020.2.1f1': '270dd8c3da1c', '2020.2.2f1': '068178b99f32', '2020.2.3f1': '8ff31bc5bf5b', '2020.2.4f1': 'becced5a802b',
  '2020.2.5f1': 'e2c53f129de5', '2020.2.6f1': '8a2143876886', '2020.2.7f1': 'c53830e277f1', '2020.3.0f1': 'c7b5465681fb',
  '2020.3.1f1': '77a89f25062f', '2020.3.2f1': '8fd9074bf66c', '2020.3.3f1': '76626098c1c4', '2020.3.4f1': '0abb6314276a',
  '2020.3.5f1': '8095aa901b9b', '2020.3.6f1': '338bb68529b2', '2020.3.7f1': 'dd97f2c94397', '2020.3.8f1': '507919d4fff5',
  '2020.3.9f1': '108be757e447', '2020.3.10f1': '297d780c91bc', '2020.3.11f1': '99c7afb366b3', '2020.3.12f1': 'b3b2c6512326',
  '2020.3.13f1': '71691879b7f5', '2020.3.14f1': 'd0d1bb862f9d', '2020.3.15f2': '6cf78cb77498', '2020.3.16f1': '049d6eca3c44',
  '2020.3.17f1': 'a4537701e4ab', '2020.3.18f1': 'a7d1c678663c', '2020.3.19f1': '68f137dc9bbe', '2020.3.20f1': '41c4e627c95f',
  '2020.3.21f1': 'a38c86f6690f', '2020.3.22f1': 'e1a7f79fd887', '2021.1.0f1': '61a549675243', '2021.1.1f1': '6fdc41dfa55a',
  '2021.1.2f1': 'e5d502d80fbb', '2021.1.3f1': '4bef613afd59', '2021.1.4f1': '4cd64a618c1b', '2021.1.5f1': '3737af19df53',
  '2021.1.6f1': 'c0fade0cc7e9', '2021.1.7f1': 'd91830b65d9b', '2021.1.9f1': '7a790e367ab3', '2021.1.10f1': 'b15f561b2cef',
  '2021.1.11f1': '4d8c25f7477e', '2021.1.12f1': 'afcadd793de6', '2021.1.13f1': 'a03098edbbe0', '2021.1.14f1': '51d2f824827f',
  '2021.1.15f1': 'e767a7370072', '2021.1.16f1': '5fa502fca597', '2021.1.17f1': '03b40fe07a36', '2021.1.18f1': '25bdc3efbc2d',
  '2021.1.19f1': '5f5eb8bbdc25', '2021.1.20f1': 'be552157821d', '2021.1.21f1': 'f2d5d3c59f8c', '2021.1.22f1': 'a137e5fb0427',
  '2021.1.23f1': 'b50729e604a9', '2021.1.24f1': '6667702a1e7c', '2021.1.25f1': 'b6f2b893ea32', '2021.1.26f1': '6f076387c01d',
  '2021.1.27f1': '7e296a84045d', '2021.1.28f1': 'f3f9dc10f3dd', '2021.2.0f1': '4bf1ec4b23c9', '2021.2.1f1': 'c20c6d589440',
  '2021.2.2f1': '5e2b1e92c7f8', '2022.1.0a13': '5a5aca0fb632'
}

/** Map of Unity version to package download origin subdomain. */
const unityDownloadSubdomain: Record<string, string> = {
  'default': 'download',
  '2022.1.0a13': 'beta'
}

/** Map of Unity version to package download path. */
const unityDownloadPath: Record<string, string> = {
  'default': 'download_unity',
  '2022.1.0a13': 'download'
}


/**
 * Install Unity package at specified location.
 *
 * @param {string} version Unity package version.
 * @param {string} packageName Unity package name.
 * @param {boolean} standalone Whether installation called by standalone action or part of service release process.
 *
 * @return {Promise<OperationOutcome>} Asynchronous results of Unity package installation.
 */
export const installUnity = async (
  version: string,
  packageName: string = 'MacEditorInstaller/Unity',
  standalone: boolean = false
): Promise<OperationOutcome> => {
  let errorSuggestion: string | undefined
  let errorMessage: string | undefined

  if (unityVersionMap[version]) {
    const installerFolderPath = unityDownloadFolder(version)
    const installerPath = path.join(installerFolderPath, 'Unity.pkg')
    const unityInstallerCacheKey = cacheKeyForUnity(version)
    // Prepare folder for Unity package installer.
    if (!fs.existsSync(installerFolderPath)) fs.mkdirSync(installerFolderPath, { recursive: true })

    let cacheKey = await cache.restoreCache([installerFolderPath], unityInstallerCacheKey)

    if (!cacheKey) {
      if (standalone) log.info(`Downloading ${styles.bold.open}${packageName} ${version}${styles.bold.close} package.`)
      const downloadURL = unityPackageDownloadURL(version, packageName)

      try {
        const packagePath = await tc.downloadTool(downloadURL, installerPath)
        if (standalone)
          log.success(`${styles.bold.open}${packageName} ${version}${styles.bold.close} packaged downloaded to: ${packagePath}`)
      } catch (error) {
        errorMessage = `Unable to download ${packageName} ${version} from: ${error}`
        errorSuggestion = 'Make sure that known version has been specified and package name with this version has been released.'
      }

      if (!errorMessage) {
        if (standalone)
          log.info(`Storing ${styles.bold.open}${packageName} ${version}${
            styles.bold.close} package installed in cache (under ${unityInstallerCacheKey} key) from from: ${installerFolderPath}`)

        const cachedInstallerId = await cache.saveCache([installerFolderPath], unityInstallerCacheKey)
        if (cachedInstallerId) {
          if (standalone)
            log.success(`${styles.bold.open}${packageName} ${version}${styles.bold.close} package cached`)
        } else {
          errorMessage = `Unable to cache installer from: ${installerFolderPath}`
          errorSuggestion = 'Make sure that overall repository cache is not more than 5Gb.'
        }
      }
    }

    if (!errorMessage) {
      if (standalone) log.info(`Installing ${styles.bold.open}${packageName} ${version}${styles.bold.close} package`)

      let execResult = await cliExec({
        cli: 'sudo',
        commandOrFlags: ['installer', '-dumplog', '-package', installerPath, '-target', action.rootWorkingDirectory]
      })

      if (execResult.code === 0) {
        if (standalone)
          log.success(`${styles.bold.open}${packageName} ${version}${styles.bold.close} package installed`)
      } else {
        errorMessage = `Unable to install ${packageName} ${version} package: ${execResult.stderr || execResult.stdout}`
        errorSuggestion = 'Ensure that downloaded package not corrupted.'
      }

      if (!errorMessage) {
        const unityBinaryPath = `/Applications/Unity/Unity.app/Contents/MacOS/Unity`

        if (fs.existsSync(unityBinaryPath)) {
          // Sharing Unity binary location.
          core.setOutput('unity-path', unityBinaryPath)
        } else {
          errorMessage = `Unable locate Unity package executable or located more than one at: /Applications/Unity/Unity.app`
          errorSuggestion = 'Check logs for installation problem warnings or check installed Unity package.'
        }
      }
    }

    if (!errorMessage) {
      const certificateCopyPath = path.join(process.env['HOME']!, 'Library', 'Unity', 'Certificates', 'CACerts.pem')
      const certificatePath = path.join(action.rootWorkingDirectory, GITHUB_ACTIONS_PATH, 'resources', 'unity', 'CACerts.pem')

      if (standalone)
        log.info(`Copying ${styles.bold.open}CACerts.pem${styles.bold.close} to: ${path.dirname(certificateCopyPath)}`)
      if (!fs.existsSync(certificateCopyPath)) fs.mkdirSync(certificateCopyPath, {recursive: true})
      if (fs.existsSync(certificatePath)) fs.copyFileSync(certificatePath, certificateCopyPath)
      else {
        errorMessage = 'Unable to copy custom certificate'
        errorSuggestion = 'Ensure that certificate is part of repository and available at: ./resources/unity'
      }

      if (!errorMessage && standalone) log.success(`${styles.bold.open}CACerts.pem${styles.bold.close} copied`)
    }
  } else {
    errorMessage = `Unable install unknown Unity version: ${version}`
    errorSuggestion = `Please use one of known Unity versions: ${Object.keys(unityVersionMap).sort().join(', ')}`
  }

  return { successful: !errorMessage, errorMessage, errorSuggestion }
}

/**
 * Relative path to location, where Unity editor should be downloaded.
 *
 * @param {string} version Unity package version.
 *
 * @return {string} Download folder path.
 */
const unityDownloadFolder = (version: string): string => path.join(ACTION_WORKING_DIR_PATH, 'UnityPackages', version)

/**
 * Generate Unity package download URL.
 *
 * @param {string} version Unity package version.
 * @param {string} packageName Unity package name.
 *
 * @return {string} URL which can be used to download Unity package.
 */
const unityPackageDownloadURL = (version: string, packageName: string): string => {
  return `https://${
    unityDownloadSubdomain[version] ?? unityDownloadSubdomain['default']
  }.unity3d.com/${
    unityDownloadPath[version] ?? unityDownloadPath['default']
  }/${unityVersionMap[version]}/${packageName}.pkg`
}

/**
 * Compose key under which cached installer will be stored.
 *
 * @param {string} version Unity package version.
 *
 * @return {string} Key to use to access cached installer.
 */
const cacheKeyForUnity = (version: string): string => `unity-installer-${unityVersionMap[version]}`


/**
 * Run standalone Unity installation action.
 *
 * @return {Promise<void>} Asynchronous results of Unity package installation.
 */
const run = async (): Promise<void> => {
  const packageName = getActionInput('unity-package-name')
  const version = getActionInput('unity-version')

  core.startGroup(`Install ${styles.bold.open}${packageName} ${version}${styles.bold.close} package`)
  let outcome = await installUnity(version, packageName, true)
  if (outcome.errorSuggestion) log.warning(outcome.errorSuggestion)
  if (outcome.errorMessage) core.setFailed(outcome.errorMessage)
  core.endGroup()
}

// Run standalone Unity package installer if required.
if (getActionInput('standalone-action')) {
  run()
}
