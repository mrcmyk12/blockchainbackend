import * as core from '@actions/core'
import path from 'path'
import fs from 'fs'
import {getEventInformation, downloadArtifact, action} from '../helpers/actions'
import {OperationOutcome} from '../helpers/types'

/** GitHub Action entry point. */
async function run(): Promise<void> {
  let outcome: OperationOutcome
  core.startGroup('Check is ready for release')

  try {
    // @ts-ignore At least one of tokens will be specified, or exception will be thrown.
    const token: string = action.github.ghToken || action.github.token
    core.setOutput('ready', 'false')
    // Read JSON file with triggering event information.
    const eventInformation = getEventInformation()
    outcome = eventInformation

    if (outcome.successful) {
      const artifactFilename = `release-artifacts-${action.issue.number}.json`
      const downloadOutcome = await downloadArtifact(token, artifactFilename)
      outcome = downloadOutcome

      if (outcome.successful) {
        const artifactPath = path.join(downloadOutcome.downloadPath, artifactFilename)

        if (fs.existsSync(artifactPath)) {
          const artifactContent = fs.readFileSync(artifactPath).toString('utf8')
          if (artifactContent) {
            core.setOutput('ready', 'true')
          }
        } else outcome.errorMessage = 'Unable to download artifact.'
      }
    }

    if (outcome.errorSuggestion) core.warning(outcome.errorSuggestion)
    if (!eventInformation.successful && outcome.errorMessage)
      core.setFailed(outcome.errorMessage)
    if (!outcome.successful) core.endGroup()
  } catch (error) {
    core.setFailed(error.message)
  }
}

run()
