import * as http from '@actions/http-client'
import path from 'path'
import fs from 'fs'
import {getActionInput} from '../../helpers/actions'
import {OperationOutcome} from '../../helpers/types'
import * as Service from '../service'

/** Packagist service package handler. */
class PackagistService extends Service.ServiceBase {
  /** HTTP client to access Packagist REST API. */
  private httpClient: http.HttpClient

  /** Packagist username which should be used to authorise REST API calls. */
  private username!: string

  /** Packagist REST API access token (pair to specified username). */
  private token!: string

  constructor() {
    super()

    this.httpClient = new http.HttpClient('deploy-http-client', [], {
      headers: {'Content-Type': 'application/json'}
    })
  }

  serviceName(): string {
    return 'packagist'
  }

  secretValues(): string[] {
    return [this.username, this.token]
  }

  environmentVariables(): Record<string, any> {
    return {}
  }

  readInput(): void {
    this.username = getActionInput('packagist-username', true)
    this.token = getActionInput('packagist-token', true)
  }

  async verifyInput(): Promise<OperationOutcome> {
    const composerPath = this.filePath({name: 'composer.json'})
    let errorSuggestion: string | undefined
    let errorMessage: string | undefined

    if (!composerPath) {
      errorMessage = `'composer.json' not found in: ${this.productPath()}.`
      errorSuggestion = 'Ensure that file has been committed (present in product directory for monorepo).'
    } else if (!fs.existsSync(composerPath)) {
      errorMessage = `'composer.json' file not found in: ${path.dirname(composerPath)}`
      errorSuggestion = 'Make sure that proper relative path has been set (present in product directory for monorepo).'
    }

    return {successful: !errorMessage, errorMessage, errorSuggestion}
  }

  async verifyServiceEnvironment(): Promise<OperationOutcome> {
    return {successful: true}
  }

  async setupServiceEnvironment(): Promise<OperationOutcome> {
    return {successful: true}
  }

  async fetchPackageInformation(): Promise<OperationOutcome> {
    const composerPath = this.filePath({name: 'composer.json'})
    let composerContent = fs.readFileSync(composerPath!).toString('utf8')
    let errorSuggestion: string | undefined
    let errorMessage: string | undefined

    const composerJSON = JSON.parse(composerContent)

    if (composerJSON) {
      if (!(this.packageName = composerJSON['name']))
        errorMessage = `'name' is missing from package config: ${composerPath}`
      if (!errorMessage && !(this.packageVersion = composerJSON['version']))
        errorMessage = `'version' is missing from package config: ${composerPath}`
      if (errorMessage)
        errorSuggestion = 'Make sure that all required fields has been added to \'composer.json\' and committed.'
    } else {
      errorMessage = '\'composer.json\' is empty or contains non-UTF8 characters.'
      errorSuggestion = 'Ensure that file not empty and contains only valid characters.'
    }

    return {successful: !errorMessage, errorMessage, errorSuggestion}
  }

  override preBuildUserScript(): string {
    return 'pre-packagist-build'
  }

  override prePublishUserScript(): string {
    return 'pre-packagist-publish'
  }

  async publish(): Promise<OperationOutcome> {
    const query = `username=${this.username}&apiToken=${this.token}`
    const body = {repository: {url: `https://github.com/${this.slug()}`}}
    let errorSuggestion: string | undefined
    let errorMessage: string | undefined

    const response = await this.httpClient.post(
      `https://packagist.org/api/update-package?${query}`,
      JSON.stringify(body)
    )

    const responseBody: Record<string, any> = JSON.parse(
      await response.readBody()
    )
    const statusCode = response.message.statusCode ?? 500

    if (statusCode >= 400) {
      if (responseBody['Content-Type'] === 'application/json')
        errorMessage = responseBody['data']['message'] ?? responseBody['data']
      else errorMessage = responseBody['data']
      errorSuggestion = `Ensure that '${this.username}' has permissions to update package using specified token.`
    }

    return {successful: !errorMessage, errorMessage, errorSuggestion}
  }
}

/** GitHub action runner entry point. */
async function run(): Promise<void> {
  await PackagistService.actionRunner(new PackagistService())
}

run()
