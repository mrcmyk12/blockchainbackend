import fs from 'fs'
import {action, getActionInput, uploadArtifactsForRelease} from '../../helpers/actions'
import {changelogByType} from '../../commands/changelog'
import {OperationOutcome} from '../../helpers/types'
import {createRelease} from '../../helpers/github'
import {UPLOAD_FOLDER_PATH} from '../../constants'
import {cliExec} from '../../helpers/cli'
import * as log from '../../helpers/log'
import * as Service from '../service'

class GitHubReleaseService extends Service.ServiceBase {
  /** Bash command which should be called before uploading as GitHub Release. */
  private command?: string

  constructor() {
    super()

    // Paths should be created before publish.
    this.shouldSetupServiceEnvironment = true
  }

  serviceName(): string {
    return 'GitHub Release'
  }

  secretValues(): string[] {
    return []
  }

  environmentVariables(): Record<string, any> {
    return {}
  }

  readInput(): void {
    const artifactsFolder = getActionInput('artifacts-folder', false, UPLOAD_FOLDER_PATH)
    this.command = getActionInput('command', false)

    if (artifactsFolder) this.artifactsPath = this.productPath(artifactsFolder, true)
  }

  async verifyInput(): Promise<OperationOutcome> {
    return {successful: true}
  }

  async verifyServiceEnvironment(): Promise<OperationOutcome> {
    return {successful: true}
  }

  async setupServiceEnvironment(): Promise<OperationOutcome> {
    const artifactsPath = this.artifactsPath ?? UPLOAD_FOLDER_PATH
    if (artifactsPath && !fs.existsSync(artifactsPath))
      fs.mkdirSync(artifactsPath, {recursive: true})

    return {successful: true}
  }

  async fetchPackageInformation(): Promise<OperationOutcome> {
    return {successful: true}
  }

  override preBuildUserScript(): string {
    return 'pre-github-release-build'
  }

  // @ts-ignore Async doesn't override properly.
  async build(): Promise<OperationOutcome> {
    let errorMessage, errorSuggestion: string | undefined

    // Exec custom command (if has been set).
    if (this.command) {
      log.info('Running custom release build command')

      const commandOrFlags = this.command.split(' ')
      const cli = commandOrFlags.shift()

      const execResult = await cliExec({cli: cli!, commandOrFlags})

      if (execResult.code !== 0) {
        errorMessage = `Unable to run provided build command: ${execResult.stderr || execResult.stdout}`
        errorSuggestion = 'Check syntax and ensure that all required dependencies installed.'
      }
    }

    return {successful: !errorMessage, errorMessage, errorSuggestion}
  }

  override prePublishUserScript(): string {
    return 'pre-github-release-publish'
  }

  async publish(): Promise<OperationOutcome> {
    let errorMessage, errorSuggestion: string | undefined
    let outcome: OperationOutcome | undefined
    let hasArtifacts = false

    if (this.artifactsPath && fs.existsSync(this.artifactsPath))
      hasArtifacts = fs.readdirSync(this.artifactsPath).length > 0

    if (this.releaseProcessInformation && this.releaseProcessInformation.changelog) {
      const {owner, repo} = action.repository
      let productName = ''

      if (this.releaseProcessInformation.product) {
        log.info(`Creating ${this.releaseProcessInformation.product.name} ${this.releaseProcessInformation.changelog.version} release`)
        productName = this.releaseProcessInformation.product.name
        if (productName === action.repository.repo) productName = ''
      } else log.info(`Creating ${this.releaseProcessInformation.changelog.version} release`)

      // Generating change log for release body.
      const releaseBody = changelogByType(this.releaseProcessInformation.changelog, 'md', true)
      const createOutcome = await createRelease(
        owner,
        repo,
        this.releaseProcessInformation.changelog.version!,
        productName,
        releaseBody,
        hasArtifacts
      )
      outcome = createOutcome

      if (outcome.successful && this.artifactsPath && hasArtifacts)
        outcome = await uploadArtifactsForRelease(this.artifactsPath, createOutcome)
    } else {
      errorMessage = 'Release artifacts is missing'
      errorSuggestion = 'Release command not used on PR or build is older than 1 day.'
    }

    if (outcome && !outcome.successful) {
      errorMessage = outcome.errorMessage
      errorSuggestion = outcome.errorSuggestion
    }


    return {successful: !errorMessage, errorMessage, errorSuggestion}
  }
}

/** GitHub action runner entry point. */
async function run(): Promise<void> {
  await GitHubReleaseService.actionRunner(new GitHubReleaseService())
}

run()
