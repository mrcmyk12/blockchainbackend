import {installAWSCLI, checkAWSCLIInstalled} from '../../installers/install-aws-cli'
import {checkPythonVersion} from '../../installers/install-python'
import {getActionInput} from '../../helpers/actions'
import {OperationOutcome} from '../../helpers/types'
import {cliExec} from '../../helpers/cli'
import * as Service from '../service'

/** Base class for AWS services which use AWS CLI. */
export default abstract class AWSServices extends Service.ServiceBase {
  /** Whether AWS CLI should be installed or not. */
  installASWCCLI: boolean = false

  /** Subclass should return name of command. */
  abstract command(): string

  /** Subclass should return sub-command which should be called on `command`. */
  abstract subCommand(): string

  /** List of arguments which should be passed to `command`. */
  abstract arguments(): string[]

  secretAccessKey?: string
  accessKeyId?: string

  serviceName(): string {
    return 'aws'
  }

  secretValues(): string[] {
    return [this.accessKeyId!, this.secretAccessKey!]
  }

  environmentVariables(): Record<string, any> {
    return {
      AWS_ACCESS_KEY_ID: this.accessKeyId,
      AWS_SECRET_ACCESS_KEY: this.secretAccessKey,
      PYTHONWARNINGS: 'ignore:Unverified HTTPS request',
      AWS_EC2_METADATA_DISABLED: 'true',
      AWS_CLI_FILE_ENCODING: 'UTF-8'
    }
  }

  readInput() {
    this.secretAccessKey = getActionInput('aws-secret-access-key', true)
    this.accessKeyId = getActionInput('aws-access-key-id', true)
  }

  async verifyInput(): Promise<OperationOutcome> {
    return {successful: true}
  }

  async verifyServiceEnvironment(): Promise<OperationOutcome> {
    let errorMessage, errorSuggestion: string | undefined

    const pythonCheckResult = await checkPythonVersion(3, 5)
    if (pythonCheckResult.errorMessage) {
      errorMessage = pythonCheckResult.errorMessage
      errorSuggestion = pythonCheckResult.errorSuggestion
    }

    if (!errorMessage) {
      const checkResult = await checkAWSCLIInstalled()

      if (checkResult.errorMessage) {
        errorMessage = checkResult.errorMessage
        errorSuggestion = checkResult.errorSuggestion
      } else this.installASWCCLI = !checkResult.installed
    }

    return {successful: !errorMessage, errorMessage, errorSuggestion}
  }

  async setupServiceEnvironment(): Promise<OperationOutcome> {
    let errorMessage, errorSuggestion: string | undefined

    if (this.installASWCCLI) {
      const installResult = await installAWSCLI()

      if (!installResult.successful) {
        errorMessage = installResult.errorMessage
        errorSuggestion = installResult.errorSuggestion
      }
    }

    return {successful: !errorMessage, errorMessage, errorSuggestion}
  }

  async fetchPackageInformation(): Promise<OperationOutcome> {
    return {successful: true}
  }

  override preBuildUserScript(): string {
    return `pre-${this.command()}-build`
  }

  override prePublishUserScript(): string {
    return `pre-${this.command()}-publish`
  }

  async publish(): Promise<OperationOutcome> {
    let errorMessage, errorSuggestion: string | undefined

    // Preparing arguments for `aws` command-line tool.
    let commandOrFlags: string[] = ['--no-verify-ssl', this.command(), this.subCommand()]
    commandOrFlags.push(...this.arguments())

    const publishResult = await cliExec({cli: 'aws', commandOrFlags})
    if (publishResult.code !== 0) {
      errorMessage = `AWS CLI usage failed: ${publishResult.stderr || publishResult.stdout}`
      errorSuggestion = 'Check AWS CLI output and ensure that AWS key with required permissions has been provided.'
    }

    return {successful: !errorMessage, errorMessage, errorSuggestion}
  }
}
