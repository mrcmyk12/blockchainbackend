import fse from 'fs-extra'
import path from 'path'
import fs from 'fs'
import {checkTwineInstalled, installTwineCli} from '../../installers/install-twine-cli'
import {checkPythonVersion} from '../../installers/install-python'
import {OperationOutcome} from '../../helpers/types'
import {getActionInput} from '../../helpers/actions'
import {UPLOAD_FOLDER_PATH} from '../../constants'
import {cliExec} from '../../helpers/cli'
import * as Service from '../service'

/** PyPi service package handler. */
class PyPiService extends Service.ServiceBase {
  /** Full path to 'setup.py' which should be used during artifacts build and release. */
  private setupPath?: string

  /** PyPi account username / password. */
  private username!: string
  private password!: string

  serviceName(): string {
    return 'twine'
  }

  secretValues(): string[] {
    return [this.username!, this.password!]
  }

  environmentVariables(): Record<string, any> {
    return {}
  }

  readInput(): void {
    this.username = getActionInput('pypi-username', true)
    this.password = getActionInput('pypi-password', true)
    this.setupPath = this.filePath({name: 'setup.py'}, getActionInput('setup-path', false))
    this.artifactsPath = this.productPath(getActionInput('artifacts-path', true, UPLOAD_FOLDER_PATH), true)

    this.artifactsFilter = getActionInput('artifacts-filter', false, '')
      .split(',')
      .filter(filter => filter.length > 0)
  }

  async verifyInput(): Promise<OperationOutcome> {
    let errorSuggestion: string | undefined
    let errorMessage: string | undefined

    if (!this.setupPath) errorMessage = '\'setup.py\' file path not set.'
    else if (!fs.existsSync(this.setupPath)) {
      errorMessage = `'${path.basename(this.setupPath)}' file not found: ${path.dirname(this.setupPath)}`
      errorSuggestion = 'Make sure that proper relative path has been set (present in product directory for monorepo).'
    }

    return {successful: !errorMessage, errorMessage, errorSuggestion}
  }

  // @ts-ignore Async doesn't override properly.
  async updateServiceSettings(): Promise<OperationOutcome> {
    const outcome = await super.updateServiceSettings()

    if (outcome.successful) {
      const pypiConfigurationPath = path.join(process.env['HOME']!, '.pypirc')

      this.markChangedSettingsFile(pypiConfigurationPath)

      const configuration = `[distutils]
index-servers = pypi

[pypi]
username: ${this.username}
password: ${this.password}`

      fs.writeFileSync(pypiConfigurationPath, configuration, {encoding: 'utf8'})
    }

    return outcome
  }

  async verifyServiceEnvironment(): Promise<OperationOutcome> {
    let errorMessage, errorSuggestion: string | undefined

    // Check whether Python or required version available before installing Twine cli.
    const pythonCheckResult = await checkPythonVersion(3)
    if (!pythonCheckResult.match) {
      errorMessage = pythonCheckResult.errorMessage
      errorSuggestion = pythonCheckResult.errorSuggestion
    }

    if (!errorMessage) {
      // Check whether `twine` installed or install if missing.
      const twineCheckResult = await checkTwineInstalled()
      if (twineCheckResult.errorMessage) {
        errorMessage = twineCheckResult.errorMessage
        errorSuggestion = twineCheckResult.errorSuggestion
      } else this.shouldSetupServiceEnvironment = !twineCheckResult.installed
    }

    return {successful: !errorMessage, errorMessage, errorSuggestion}
  }

  async setupServiceEnvironment(): Promise<OperationOutcome> {
    let errorMessage, errorSuggestion: string | undefined

    const twineInstallResult = await installTwineCli()
    if (!twineInstallResult.installed) {
      errorMessage = twineInstallResult.errorMessage
      errorSuggestion = twineInstallResult.errorSuggestion
    }

    return {successful: !errorMessage, errorMessage, errorSuggestion}
  }

  async fetchPackageInformation(): Promise<OperationOutcome> {
    const setupContent = fs.readFileSync(this.setupPath!).toString('utf8')
    let errorMessage, errorSuggestion: string | undefined

    if (setupContent) {
      const matchedName = setupContent.match(/name='(.*)',/m)
      if (!matchedName || matchedName.length <= 1) errorMessage = `'name' is missing from package config: ${this.setupPath}`
      else this.packageName = matchedName[1]

      if (!errorMessage) {
        const matchedVersion = setupContent.match(/version='(.*)',/m)
        if (!matchedVersion || matchedVersion.length <= 1)
          errorMessage = `'version' is missing from package config: ${this.setupPath}`
        else this.packageVersion = matchedVersion[1]
      }
    } else {
      errorMessage = '\'setup.py\' is empty or contains non-UTF8 characters.'
      errorSuggestion = 'Ensure that file not empty and contains only valid characters.'
    }

    return {successful: !errorMessage, errorMessage, errorSuggestion}
  }

  override preBuildUserScript(): string {
    return 'pre-pypi-build'
  }

  // @ts-ignore Async doesn't override properly.
  async build(): Promise<OperationOutcome> {
    const buildResult = await cliExec({cli: 'python', commandOrFlags: [this.setupPath!, 'sdist']})

    if (buildResult.code === 0 && this.artifactsPath) {
      if (!fs.existsSync(this.artifactsPath)) fs.mkdirSync(this.artifactsPath, {recursive: true})
      fse.copySync(this.productPath('dist'), this.artifactsPath, { filter: this.artifactsFilterFunction() })
    }

    return {
      successful: buildResult.code === 0,
      errorMessage: buildResult.code !== 0 ? `Gem build failed: ${buildResult.stderr || buildResult.stdout}` : undefined
    }
  }

  override prePublishUserScript(): string {
    return 'pre-pypi-publish'
  }

  async publish(): Promise<OperationOutcome> {
    const packageMovePath = `${this.artifactsPath}/*`
    const uploadResult = await cliExec({
      cli: 'twine',
      commandOrFlags: ['upload', '--verbose', '--repository', 'pypi', packageMovePath]
    })

    return {
      successful: uploadResult.code === 0,
      errorMessage: uploadResult.code !== 0 ? `Unable upload built Gem to PyPi: ${uploadResult.stderr || uploadResult.stdout}` : undefined
    }
  }
}

/** GitHub action runner entry point. */
async function run(): Promise<void> {
  await PyPiService.actionRunner(new PyPiService())
}

run()
