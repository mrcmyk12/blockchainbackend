import * as core from '@actions/core'
import fs from 'fs'
import {getActionInput} from '../../helpers/actions'
import {cliExec} from '../../helpers/cli'
import * as log from '../../helpers/log'


// Retrieve Unity package installation folder.
const standalone = getActionInput('standalone-action')
let errorSuggestion: string | undefined
let errorMessage: string | undefined

/**
 * Deactivate license used by local Unity package.
 *
 * @return {Promise<void>} Asynchronous results of license deactivation.
 */
export const deactivateLicense = async (): Promise<void> => {
  const unityBinaryPath = `/Applications/Unity/Unity.app/Contents/MacOS/Unity`

  if (standalone) core.startGroup('Deactivate local Unity package license')
  if (fs.existsSync(unityBinaryPath)) {
    let execResult = await cliExec({
      cli: unityBinaryPath,
      commandOrFlags: ['-quit', '-batchmode', '-returnlicense']
    })

    if (execResult.code !== 0) {
      errorSuggestion = 'Unity license deactivation failed.\nThis machine doesn\'t contain activated license to return.'
    }
  } else {
    errorMessage = `Unable locate Unity package executable or located more than one at: /Applications/Unity/Unity.app`
    errorSuggestion = 'Check logs for installation problem warnings or check installed Unity package.'
  }

  if (standalone && errorSuggestion) log.warning(errorSuggestion)
  if (standalone && errorMessage) core.setFailed(errorMessage)
  if (standalone) core.endGroup()
}

// Automatically call license deactivation for standalone action (if required).
if (standalone) deactivateLicense()
