import {Changelog} from '../commands/changelog'

/** Base type which allow express result of any operation performed by action. */
export type OperationOutcome = {
  /** Whether operation completed successfully or something went wrong. */
  successful: boolean

  /** Operation processing error description. */
  errorMessage?: string

  /** Suggestion on what can be done to fix error described in `errorMessage`. */
  errorSuggestion?: string
}

/** Basic information about issue which triggered workflow. */
type BaseGitHubIssue = {
  /** Type of issue which triggered workflow. */
  type: 'issue' | 'pull-request' | 'issue-comment'

  /** GitHub issue number by creation order. */
  number: number

  /** Title which has been set by user during last issue edit / create. */
  title: string

  /** Message which has been used during issues / pull request creation. */
  body: string

  /** Current issue state. */
  state: 'open' | 'closed'

  /** GitHub username of person which modified issue / comment. */
  creator: string

  /** Whether requested issue pull request or not. */
  isPullRequest?: boolean
}

/** Regular GitHub issue representation. */
export type GitHubIssue = BaseGitHubIssue & {
  type: 'issue'
}

/** GitHub pull request issue representation. */
export type GitHubPullRequest = BaseGitHubIssue & {
  type: 'pull-request'

  /** Repository which should be used as source of changes. */
  head: {
    /** Git tag / branch from which code should be merged. */
    ref: string

    /** Name of repository which contains target tag / branch. */
    repo: string

    /** Owner of repository with suggested changes. */
    owner: string

    /**
     * Whether repository with changes is fork or not.
     *
     * It is possible, that changes in fork repo will be impossible because of lack of permissions.
     */
    fork: boolean

    /** Url with credentials, which let clone head repository. */
    cloneUrl: string
  }

  /** Repository into which changes should be pushed. */
  base: {
    /** Git tag / branch into which changes should be merged. */
    ref: string

    /** Name of repository which contains target tag / branch. */
    repo: string

    /** Owner of repository where suggested changes will be merged. */
    owner: string

    /** Url with credentials, which let clone base repository. */
    cloneUrl: string
  }
}

/** GitHub issue comment representation. */
export type GitHubIssueComment = BaseGitHubIssue & {
  type: 'issue-comment'

  /** Information about created / edited comment. */
  comment: {
    /** Information about person which created / modified comment on issue. */
    author: {
      /** Author's GitHub username. */
      username: string

      /** Comment author association with repository (only interested values listed here). */
      ownerOrMember: boolean
    }

    /** Actual comment data left by author on issue / pull request. */
    body: string
  }
}

/** Configured GitHub pages representation. */
export type GitHubPages = OperationOutcome & {
  /** Whether GitHub Pages configured or not. */
  configured: boolean

  /** Name of branch which should be used as source of GitHub Pages site. */
  branch?: string

  /** Relative path to the folder which contains GitHub Pages site content. */
  path?: string
}

/** Created GitHub issue representation. */
export type GitHubRelease = OperationOutcome & {
  /** Unique release identifier. */
  id?: number

  /** URL which should be used for release assets upload. */
  uploadUrl?: string
}

/** GitHub bulk issues fetch result representation type. */
export type GitHubIssues = OperationOutcome & {
  /** List of fetched GitHub issues. */
  issues?: (GitHubIssue|GitHubPullRequest)[]
}

/** GitHub tag representation. */
export type GitHubRepositoryTag = {
  /** Name of the tag. */
  name: string

  /** Tag's commit information. */
  commit: { sha: string, url: string }
}

/** GitHub repository tags representation. */
export type GitHubRepositoryTags = OperationOutcome & {
  /** List of fetched tags. */
  tags: GitHubRepositoryTag[]
}

/** Repository label representation. */
export type GitHubRepositoryLabel = {
  /** Name of issue / PR label. */
  name: string

  /** Additional label description. */
  description: string | null

  /** HEX code for label background color. */
  color: string
}

/** GitHub repository labels representation. */
export type GitHubRepositoryLabels = OperationOutcome & {
  /** List of known labels. */
  labels: GitHubRepositoryLabel[]
}

/** Release process outcome representation. */
export type ReleaseProcessOutcome = OperationOutcome & {
  /** Changelog which has been generated during PR body processing. */
  changelog?: Changelog

  /** Relative path to product which will be released. */
  product?: { name: string, path: string, main: boolean}

  /**
   * List of steps which already has been completed.
   * This field will allow skip steps which already completed.
   */
  completedSteps: string[]
}

/** Expected set of repository labels representation. */
export type RepositoryLabelsSet = {
  /** Issue / PR priority labels. */
  priority: GitHubRepositoryLabel[]

  /** Issue / PR processing status labels. */
  status: GitHubRepositoryLabel[]

  /** Issue / PR type labels. */
  type: GitHubRepositoryLabel[]

  [key: string]: GitHubRepositoryLabel[]
}

/** Representation of issue / PR labels changes when they addressed with upcoming release. */
export type RepositoryLabelsReleaseChangePolicy = {
  /** Instruction on which labels should be added / removed for regular issue when addressed with release. */
  issue: { remove: string[], add: string[] },

  /** Instruction on which labels should be added / removed for PR when addressed with release. */
  'pull-request': { remove: string[], add: string[] }
}

/** `projects.json` content representation model. */
export type JIRAProjects = Record<string, {
  slackNotifyChannels: {
    /** Channel which should be used to notify about release process start. */
    releaseStart: string,

    /** Channel which should be used to notify about release completion. */
    releaseCompleted: string,
  },
  /** List of repository names mapped to SDKs which they represent. */
  repositories: Record<string, string>
}>

/** Information about requested project. */
export type JIRAProject = {
  /** Unique JIRA project identifier. */
  id: string,
  /** Human-readable project name. */
  name: string,
  /** API / issue key identifier. */
  key: string,
  /** List of products release versions. */
  versions?: JIRAProjectRelease[]
}

/** Single project product release version. */
export type JIRAProjectRelease = {
  /** Unique release version identifier. */
  id: string,

  /** Name which has been assigned to release and may contain product name and version. */
  name: string,

  /** Whether product has been released already or not. */
  released: boolean,

  /** Release full URL. */
  url?: string
}

/** Action input / environment representation. */
export type ActionInformation = {
  /** Base information about GitHub server and tokens. */
  github: {
    /** GitHub token with read / write permissions generated for current action run triggered. */
    ghToken?: string

    /**
     * Additional token with `repo` access permissions and ability to get organisation members list using
     * GitHub REST API.
     */
    token?: string

    /** GitHub server host name. */
    hostname: string
  }

  /** Information about client engineering deployment bot which should be used for various actions. */
  bot: {
    /** Client engineering bot publicly visible name. */
    name: string

    /** GitHub username of client engineering bot. */
    username: string
  }

  /** Information about repository on which build has been called. */
  repository: {
    /** Owner of repository on which action has been triggered. */
    owner: string

    /** Name of repository on which action has been triggered. */
    repo: string

    /** GitHub repository slug name (consist from `organization` and `repository` joined with `/`). */
    slug: string

    /** URL which can be used to clone current repository using git+https protocol. */
    cloneUrl: string
  }

  /** Whether action triggered by regular push (not issue or pull request). */
  isRegularPush: boolean

  /** Representation of issue event on which triggered workflow run. */
  issue: GitHubIssue | GitHubPullRequest | GitHubIssueComment

  /** Full path to folder, where repository root located. */
  rootWorkingDirectory: string

  /** Full path to folder, where code from product in monorepo is stored. */
  productWorkingDirectory: string
}
