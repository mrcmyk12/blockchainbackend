import path from 'path'
import fs from 'fs'
import {ACTION_WORKING_DIR_PATH, REPOSITORY_ACTIONS_PATH} from '../constants'
import {action} from './actions'

/**
 * Retrieve run-time decided path to target product working directory.
 *
 * @return {string} Relative path to folder with target product.
 */
export const productPath = (): string => {
  let decidedPath: string = '.'

  const productPath = path.join(process.env['GITHUB_WORKSPACE']!, ACTION_WORKING_DIR_PATH, 'product-path')

  if (fs.existsSync(productPath)) {
    const productPathContent = fs.readFileSync(productPath).toString('utf8')
    if (productPathContent) decidedPath = productPathContent
  }

  return decidedPath
}

/**
 * Retrieve full path to `products.json` file location.
 *
 * @return {string|undefined} Full path to `products.json` if it exists.
 */
export const productsJSONPath = (): string | undefined => {
  const productsPath = path.join(action.rootWorkingDirectory, REPOSITORY_ACTIONS_PATH, 'products.json')
  return fs.existsSync(productsPath) ? productsPath : undefined
}

/**
 * Retrieve full path to `version.json` file location.
 *
 * @return {string|undefined} Full path to `versions.json` if it exists.
 */
export const versionsJSONPath = (): string | undefined => {
  let jsonPath: string | undefined

  const versionsPath = path.join(action.rootWorkingDirectory, REPOSITORY_ACTIONS_PATH, 'versions.json')

  if (fs.existsSync(versionsPath)) jsonPath = versionsPath

  return jsonPath
}

/**
 * Location where overall release process information is stored.
 * Object initially uploaded by comment processor which triggers changelog generation.
 *
 * @return {string} Full path to location where release process file is stored.
 */
export const releaseProcessInformationFilePath = (): string =>
  path.join(process.env['GITHUB_WORKSPACE']!, ACTION_WORKING_DIR_PATH, `release-artifacts-${action.issue.number}.json`)
