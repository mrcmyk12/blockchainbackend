import path from 'path'
import fs from 'fs'
import {OperationOutcome} from './types'
import {hexString} from './string'
import {cliExec} from './cli'

/**
 * Decrypt file at specified location.
 *
 * @param {string} source Full path to encrypted file.
 * @param {string} destination Full path to location where decrypted file should be stored.
 * @param {string} key Key which has been used to encrypt file. Will be normalised to HEX string of required length.
 * @param {string} iv Initialisation vector which has been used during file encryption. Will be normalised to HEX string
 * of required length.
 *
 * @return {Promise<CLIExecResult>} OpenSSL CLI usage results.
 */
export const decryptFile = async (source: string, destination: string, key: string, iv: string): Promise<OperationOutcome> => {
  let errorMessage, errorSuggestion: string | undefined

  if (!key || !iv) {
    errorMessage = "Unable decrypt file, because 'key' or 'iv' is missing"
    errorSuggestion = 'Ensure that variables holding \'key\' and \'iv\' set to proper values'
  } else if (!fs.existsSync(source)) {
    errorMessage = `Source file is missing: ${source}`
    errorSuggestion = 'Ensure that key file committed and proper name / identifier has been specified.'
  } else {
    const decryptedFileFolder = path.dirname(destination)

    if (!fs.existsSync(decryptedFileFolder)) fs.mkdirSync(decryptedFileFolder, {recursive: true})

    const execResult = await cliExec({
      cli: 'openssl',
      commandOrFlags: [
        'aes-256-cbc',
        '-K',
        hexString(key, 64),
        '-iv',
        hexString(iv, 32),
        '-in',
        source,
        '-out',
        destination,
        '-d'
      ]
    })

    if (execResult.code !== 0) {
      errorMessage = `Decryption failed: ${execResult.stderr || execResult.stderr}`
      errorSuggestion = 'Ensure that provided key / iv pair has been used to encrypt file earlier.'
    }
  }

  return {successful: !errorMessage, errorMessage, errorSuggestion}
}
