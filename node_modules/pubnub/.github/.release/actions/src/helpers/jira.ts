import fetch from 'node-fetch'
import path from 'path'
import fs from 'fs'
import {JIRAProject, JIRAProjectRelease, JIRAProjects} from './types'
import {versionComponents} from '../commands/changelog'
import {GITHUB_ACTIONS_PATH} from '../constants'
import {action} from './actions'
import * as log from './log'


/** Pre-load projects list. */
const projectsPath = path.join(action.rootWorkingDirectory, GITHUB_ACTIONS_PATH, 'resources', 'jira', 'projects.json')
const projects: JIRAProjects = JSON.parse(fs.readFileSync(projectsPath).toString('utf8'))

/**
 * Search for project which is suitable for specified repository.
 *
 * @return {string | undefined} Key for JIRA project under which product from repository is managed.
 */
export const jiraProjectKey = (): string | undefined => {
  let repositoryProject: string | undefined

  for (const projectKey in projects) {
    if (projects[projectKey].repositories[action.repository.repo]) {
      repositoryProject = projectKey
      break
    }
  }

  return repositoryProject
}

/**
 * Extract name of product from projects list.
 *
 * @return {string | undefined} Human-readable product name.
 */
export const repositoryProductName = (): string | undefined => {
  const projectKey = jiraProjectKey()
  return projectKey ? projects[projectKey].repositories[action.repository.repo] : undefined
}

/**
 * Retrieve Slack channel for project, which should be used to notify deployment start.
 *
 * @return {string | undefined} Unique Slack channel name (if known for project).
 */
export const projectReleaseStartNotificationChannel = (): string | undefined => {
  const projectKey = jiraProjectKey()
  let channel: string | undefined

  if (projectKey) channel = projects[projectKey].slackNotifyChannels.releaseStart

  return channel && channel.length ? channel : undefined
}

/**
 * Retrieve Slack channel for project, which should be used to notify deployment completion.
 *
 * @return {string | undefined} Unique Slack channel name (if known for project).
 */
export const projectReleaseCompletionNotificationChannel = (): string | undefined => {
  const projectKey = jiraProjectKey()
  let channel: string | undefined

  if (projectKey) channel = projects[projectKey].slackNotifyChannels.releaseCompleted

  return channel && channel.length ? channel : undefined
}

/**
 * Retrieve JIRA project by it's project key.
 *
 * @param {string} apiKey JIRA REST API access key.
 *
 * @return {Promise<JIRAProject | undefined>} Base project information which can be used in release process.
 */
export const fetchJIRAProject = async (apiKey: string): Promise<JIRAProject | undefined> => {
  let project: JIRAProject | undefined

  const projectKey = jiraProjectKey()
  if (!projectKey) return undefined

  try {
    const response = await fetch(`https://pubnub.atlassian.net/rest/api/3/project/${projectKey}`, {
      method: 'GET',
      headers: { 'Authorization': `Basic ${apiKey}`, 'Accept': 'application/json' }
    })

    const json = await response.json()

    if (json) project = json as JIRAProject
  } catch (error) {
    log.error(`Unable to fetch project with ${projectKey} key: ${error}`)
  }

  return project
}

/**
 * Retrieve release version information
 * @param {string} version
 * @param {string} apiKey
 * @param {JIRAProject} project
 * @return {Promise<JIRAProjectRelease | undefined>}
 */
export const fetchReleaseForVersion = async (version: string, apiKey: string, project?: JIRAProject): Promise<JIRAProjectRelease | undefined> => {
  let release: JIRAProjectRelease | undefined
  const productName = repositoryProductName()

  // Fetch project information if not passed by caller.
  if (!project) project = await fetchJIRAProject(apiKey)
  if (!project) return undefined

  if (productName && project.versions && project.versions.length) {
    // Prepare version, which should be searched in releases.
    const parsedVersion = versionComponents(version)
    let targetVersion = (parsedVersion.prefix ? version.replace(parsedVersion.prefix, '') : version).toLocaleLowerCase()

    for (const releaseVersion of project.versions) {
      const releaseName = releaseVersion.name ? releaseVersion.name.toLocaleLowerCase() : undefined

      if (releaseName && releaseName.includes(targetVersion) && releaseName.includes(productName.toLocaleLowerCase())) {
        release = releaseVersion
        release.url = `https://pubnub.atlassian.net/projects/${project.key}/versions/${release.id}`
        break
      }
    }
  }

  return release
}
